# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

namespaceOverride: monitoring

grafana:
  namespaceOverride: monitoring
  adminPassword: keycloak
  sidecar:
    datasources:
      enabled: false
      defaultDatasourceEnabled: false
  # values in dependent chart / https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  grafana.ini:
    snapshots:
      external_enabled: false
    server:
      # use --set grafana."grafana\.ini".server.root_url=... for this
      root_url: "specify-on-cli"
    feature_toggles:
      enable: accessTokenExpirationCheck
    log:
      level: debug
    auth.basic:
      enabled: false
    auth:
      oauth_auto_login: true
      disable_login_form: true
      # use --set grafana."grafana\.ini".... for this
      signout_redirect_url: https://<PROVIDER_DOMAIN>/auth/realms/<REALM_NAME>/protocol/openid-connect/logout?redirect_uri=http%3A%2F%2F<GRAFANA_DOMAIN>%2Flogin
    auth.generic_oauth:
      # https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/keycloak/
      enabled: true
      name: Keycloak-OAuth
      allow_sign_up: true
      client_id: grafana
      client_secret: 109vn7vrqnMlS9fZoq4kko4oO5TUM5r8
      scopes: openid email profile roles
      email_attribute_path: email
      login_attribute_path: username
      name_attribute_path: full_name
      # use --set grafana."grafana\.ini".... for this
      auth_url: https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/auth
      token_url: https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/token
      api_url: https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/userinfo
      # use resource_access.grafana for client roles instead of realm roles
      role_attribute_path: "contains(realm_access.roles[*], 'admin') && 'Admin' || contains(realm_access.roles[*], 'editor') && 'Editor' || 'Viewer'"
      # only for testing, as Grafana doesn't know about Keycloak's TLS certificate in this setup
      tls_skip_verify_insecure: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        uid: PBFA97CFB590B2093
        type: prometheus
        url: http://prometheus-kube-prometheus-prometheus.monitoring:9090/
        access: proxy
        isDefault: true
        editable: false
        jsonData:
          timeInterval: 30s

kube-state-metrics:
  namespaceOverride: monitoring

prometheus-node-exporter:
  namespaceOverride: monitoring

kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false
kubeEtcd:
  enabled: false
kubelet:
  cAdvisor:
    # remove embedded cAdvisor metrics as they are unreliable and have gaps
    # (at least on minikube on Linux with podman/cri-o
    enabled: false

prometheus:
  prometheusSpec:
    enableFeatures:
      - exemplar-storage
    podMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false


